# Generated by Django 4.2.7 on 2025-09-19 02:56

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('core', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='LedgerTransaction',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Unique identifier for the ledger transaction', primary_key=True, serialize=False)),
                ('transaction_type', models.CharField(choices=[('invoice', 'Invoice'), ('payment', 'Payment'), ('expense', 'Expense'), ('refund', 'Refund'), ('adjustment', 'Adjustment'), ('transfer', 'Transfer'), ('payroll', 'Payroll'), ('tax', 'Tax'), ('other', 'Other')], help_text='Type of financial transaction', max_length=50)),
                ('source_module', models.CharField(help_text='Django app/module that created this transaction (e.g., finance, sales)', max_length=50)),
                ('source_id', models.CharField(help_text='ID of the original transaction in the source module', max_length=100)),
                ('transaction_data', models.JSONField(help_text='Complete transaction data as JSON')),
                ('hash', models.CharField(help_text='SHA256 hash of the transaction data', max_length=64, unique=True)),
                ('blockchain_hash', models.CharField(blank=True, help_text='Hash of the blockchain transaction (0x...)', max_length=66, null=True)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('submitted', 'Submitted'), ('confirmed', 'Confirmed'), ('failed', 'Failed'), ('rejected', 'Rejected')], default='pending', help_text='Current status of the blockchain transaction', max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='When the transaction was created')),
                ('submitted_at', models.DateTimeField(blank=True, help_text='When the transaction was submitted to blockchain', null=True)),
                ('confirmed_at', models.DateTimeField(blank=True, help_text='When the transaction was confirmed on blockchain', null=True)),
                ('failed_at', models.DateTimeField(blank=True, help_text='When the transaction failed', null=True)),
                ('error_message', models.TextField(blank=True, help_text='Error message if transaction failed', null=True)),
                ('retry_count', models.PositiveIntegerField(default=0, help_text='Number of times this transaction has been retried')),
                ('gas_used', models.BigIntegerField(blank=True, help_text='Gas used for the blockchain transaction', null=True)),
                ('gas_price', models.BigIntegerField(blank=True, help_text='Gas price for the blockchain transaction', null=True)),
                ('block_number', models.BigIntegerField(blank=True, help_text='Block number where transaction was confirmed', null=True)),
                ('transaction_index', models.PositiveIntegerField(blank=True, help_text='Index of transaction within the block', null=True)),
                ('created_by', models.ForeignKey(blank=True, help_text='User who created this transaction', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_ledger_transactions', to=settings.AUTH_USER_MODEL)),
                ('organization', models.ForeignKey(help_text='Organization that owns this transaction', on_delete=django.db.models.deletion.CASCADE, related_name='ledger_transactions', to='core.organization')),
            ],
            options={
                'verbose_name': 'Ledger Transaction',
                'verbose_name_plural': 'Ledger Transactions',
                'db_table': 'ledger_transaction',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='LedgerEvent',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Unique identifier for the ledger event', primary_key=True, serialize=False)),
                ('event_type', models.CharField(choices=[('transaction_logged', 'Transaction Logged'), ('transaction_confirmed', 'Transaction Confirmed'), ('transaction_failed', 'Transaction Failed'), ('hash_verified', 'Hash Verified'), ('retry_attempted', 'Retry Attempted'), ('batch_processed', 'Batch Processed'), ('error_occurred', 'Error Occurred')], help_text='Type of event', max_length=50)),
                ('event_data', models.JSONField(default=dict, help_text='Event-specific data as JSON')),
                ('blockchain_event_id', models.CharField(blank=True, help_text='ID of the event on blockchain', max_length=100, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='When the event occurred')),
                ('transaction', models.ForeignKey(help_text='Related ledger transaction', on_delete=django.db.models.deletion.CASCADE, related_name='events', to='ledger.ledgertransaction')),
            ],
            options={
                'verbose_name': 'Ledger Event',
                'verbose_name_plural': 'Ledger Events',
                'db_table': 'ledger_event',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='LedgerConfiguration',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('blockchain_network', models.CharField(default='substrate', help_text='Blockchain network to use (substrate, ethereum, etc.)', max_length=50)),
                ('rpc_endpoint', models.URLField(help_text='RPC endpoint for blockchain connection')),
                ('contract_address', models.CharField(blank=True, help_text='Address of the deployed smart contract', max_length=66, null=True)),
                ('private_key', models.CharField(blank=True, help_text='Private key for signing transactions (encrypted)', max_length=200, null=True)),
                ('batch_size', models.PositiveIntegerField(default=10, help_text='Maximum number of transactions per batch')),
                ('batch_timeout', models.PositiveIntegerField(default=300, help_text='Timeout in seconds for batch processing')),
                ('retry_attempts', models.PositiveIntegerField(default=3, help_text='Maximum number of retry attempts')),
                ('gas_limit', models.BigIntegerField(default=1000000, help_text='Gas limit for transactions')),
                ('gas_price', models.BigIntegerField(blank=True, help_text='Gas price for transactions', null=True)),
                ('auto_confirm', models.BooleanField(default=True, help_text='Automatically confirm transactions')),
                ('is_active', models.BooleanField(default=True, help_text='Whether ledger is active for this organization')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='When the configuration was created')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='When the configuration was last updated')),
                ('organization', models.OneToOneField(help_text='Organization this configuration belongs to', on_delete=django.db.models.deletion.CASCADE, related_name='ledger_config', to='core.organization')),
            ],
            options={
                'verbose_name': 'Ledger Configuration',
                'verbose_name_plural': 'Ledger Configurations',
                'db_table': 'ledger_configuration',
            },
        ),
        migrations.CreateModel(
            name='LedgerBatch',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Unique identifier for the batch', primary_key=True, serialize=False)),
                ('batch_hash', models.CharField(help_text='Hash of the batch data', max_length=64, unique=True)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('submitted', 'Submitted'), ('confirmed', 'Confirmed'), ('failed', 'Failed'), ('partial', 'Partially Confirmed')], default='pending', help_text='Current status of the batch', max_length=20)),
                ('blockchain_hash', models.CharField(blank=True, help_text='Hash of the batch transaction on blockchain', max_length=66, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='When the batch was created')),
                ('submitted_at', models.DateTimeField(blank=True, help_text='When the batch was submitted to blockchain', null=True)),
                ('confirmed_at', models.DateTimeField(blank=True, help_text='When the batch was confirmed on blockchain', null=True)),
                ('failed_at', models.DateTimeField(blank=True, help_text='When the batch failed', null=True)),
                ('error_message', models.TextField(blank=True, help_text='Error message if batch failed', null=True)),
                ('gas_used', models.BigIntegerField(blank=True, help_text='Total gas used for the batch', null=True)),
                ('block_number', models.BigIntegerField(blank=True, help_text='Block number where batch was confirmed', null=True)),
                ('organization', models.ForeignKey(help_text='Organization that owns this batch', on_delete=django.db.models.deletion.CASCADE, related_name='ledger_batches', to='core.organization')),
                ('transactions', models.ManyToManyField(help_text='Transactions in this batch', related_name='batches', to='ledger.ledgertransaction')),
            ],
            options={
                'verbose_name': 'Ledger Batch',
                'verbose_name_plural': 'Ledger Batches',
                'db_table': 'ledger_batch',
                'ordering': ['-created_at'],
            },
        ),
        migrations.AddIndex(
            model_name='ledgertransaction',
            index=models.Index(fields=['hash'], name='ledger_tran_hash_10136f_idx'),
        ),
        migrations.AddIndex(
            model_name='ledgertransaction',
            index=models.Index(fields=['status'], name='ledger_tran_status_51b4c8_idx'),
        ),
        migrations.AddIndex(
            model_name='ledgertransaction',
            index=models.Index(fields=['transaction_type'], name='ledger_tran_transac_f447c2_idx'),
        ),
        migrations.AddIndex(
            model_name='ledgertransaction',
            index=models.Index(fields=['source_module', 'source_id'], name='ledger_tran_source__bb27ad_idx'),
        ),
        migrations.AddIndex(
            model_name='ledgertransaction',
            index=models.Index(fields=['organization', 'created_at'], name='ledger_tran_organiz_ee6c70_idx'),
        ),
        migrations.AddIndex(
            model_name='ledgertransaction',
            index=models.Index(fields=['blockchain_hash'], name='ledger_tran_blockch_07f552_idx'),
        ),
        migrations.AddConstraint(
            model_name='ledgertransaction',
            constraint=models.UniqueConstraint(fields=('source_module', 'source_id', 'organization'), name='unique_source_transaction'),
        ),
        migrations.AddIndex(
            model_name='ledgerevent',
            index=models.Index(fields=['event_type'], name='ledger_even_event_t_d0918a_idx'),
        ),
        migrations.AddIndex(
            model_name='ledgerevent',
            index=models.Index(fields=['transaction', 'created_at'], name='ledger_even_transac_66b524_idx'),
        ),
        migrations.AddIndex(
            model_name='ledgerevent',
            index=models.Index(fields=['blockchain_event_id'], name='ledger_even_blockch_0ab4a6_idx'),
        ),
        migrations.AddIndex(
            model_name='ledgerbatch',
            index=models.Index(fields=['batch_hash'], name='ledger_batc_batch_h_a8435e_idx'),
        ),
        migrations.AddIndex(
            model_name='ledgerbatch',
            index=models.Index(fields=['status'], name='ledger_batc_status_44dada_idx'),
        ),
        migrations.AddIndex(
            model_name='ledgerbatch',
            index=models.Index(fields=['organization', 'created_at'], name='ledger_batc_organiz_adc635_idx'),
        ),
    ]
