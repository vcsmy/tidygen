# Generated by Django 4.2.7 on 2025-10-20 11:34

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import model_utils.fields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('freelancers', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('gig_management', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='FreelancerNFTBadge',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('is_removed', models.BooleanField(default=False)),
                ('badge_id', models.CharField(max_length=50, unique=True, verbose_name='badge ID')),
                ('name', models.CharField(max_length=200, verbose_name='badge name')),
                ('description', models.TextField(verbose_name='description')),
                ('badge_type', models.CharField(choices=[('completion_milestone', 'Completion Milestone'), ('quality_rating', 'Quality Rating'), ('experience_level', 'Experience Level'), ('specialization', 'Specialization'), ('certification', 'Certification'), ('community_service', 'Community Service'), ('platform_loyalty', 'Platform Loyalty')], max_length=30, verbose_name='badge type')),
                ('rarity', models.CharField(choices=[('common', 'Common'), ('uncommon', 'Uncommon'), ('rare', 'Rare'), ('epic', 'Epic'), ('legendary', 'Legendary')], default='common', max_length=20, verbose_name='rarity')),
                ('image_url', models.URLField(blank=True, verbose_name='image URL')),
                ('icon_class', models.CharField(blank=True, max_length=100, verbose_name='icon class')),
                ('color_hex', models.CharField(default='#000000', max_length=7, verbose_name='color hex')),
                ('required_completed_jobs', models.IntegerField(default=0, verbose_name='required completed jobs')),
                ('required_rating', models.DecimalField(decimal_places=2, default=0, max_digits=3, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(5)], verbose_name='required rating')),
                ('required_years_experience', models.IntegerField(default=0, verbose_name='required years experience')),
                ('required_specialization', models.CharField(blank=True, max_length=100, verbose_name='required specialization')),
                ('nft_contract_address', models.CharField(blank=True, max_length=42, verbose_name='NFT contract address')),
                ('token_id', models.IntegerField(blank=True, null=True, verbose_name='token ID')),
                ('metadata_uri', models.URLField(blank=True, verbose_name='metadata URI')),
                ('is_active', models.BooleanField(default=True, verbose_name='is active')),
                ('is_transferable', models.BooleanField(default=False, verbose_name='is transferable')),
                ('mint_cost_wei', models.DecimalField(decimal_places=0, default=0, max_digits=20, verbose_name='mint cost wei')),
            ],
            options={
                'verbose_name': 'Freelancer NFT Badge',
                'verbose_name_plural': 'Freelancer NFT Badges',
                'ordering': ['rarity', 'name'],
            },
        ),
        migrations.CreateModel(
            name='FreelancerNFTInstance',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('is_removed', models.BooleanField(default=False)),
                ('token_id', models.IntegerField(unique=True, verbose_name='token ID')),
                ('nft_contract_address', models.CharField(max_length=42, verbose_name='NFT contract address')),
                ('blockchain_network', models.CharField(default='ethereum', max_length=50, verbose_name='blockchain network')),
                ('current_owner_address', models.CharField(max_length=42, verbose_name='current owner address')),
                ('original_owner_address', models.CharField(max_length=42, verbose_name='original owner address')),
                ('mint_transaction_hash', models.CharField(blank=True, max_length=66, verbose_name='mint transaction hash')),
                ('last_transfer_hash', models.CharField(blank=True, max_length=66, verbose_name='last transfer hash')),
                ('status', models.CharField(choices=[('minting', 'Minting'), ('minted', 'Minted'), ('transferred', 'Transferred'), ('burned', 'Burned')], default='minting', max_length=20, verbose_name='status')),
                ('minted_at', models.DateTimeField(blank=True, null=True, verbose_name='minted at')),
                ('metadata_uri', models.URLField(blank=True, verbose_name='metadata URI')),
                ('badge', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='instances', to='freelancer_web3.freelancernftbadge')),
                ('earned_for_job', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='gig_management.gigjob')),
                ('earned_for_milestone', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='gig_management.jobmilestone')),
                ('freelancer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='nft_badges', to='freelancers.freelancer')),
            ],
            options={
                'verbose_name': 'Freelancer NFT Instance',
                'verbose_name_plural': 'Freelancer NFT Instances',
                'ordering': ['-minted_at'],
            },
        ),
        migrations.CreateModel(
            name='FreelancerReputationToken',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('is_removed', models.BooleanField(default=False)),
                ('token_type', models.CharField(choices=[('quality', 'Quality'), ('reliability', 'Reliability'), ('communication', 'Communication'), ('punctuality', 'Punctuality'), ('overall', 'Overall')], max_length=20, verbose_name='token type')),
                ('token_amount', models.DecimalField(decimal_places=8, default=0, max_digits=20, verbose_name='token amount')),
                ('token_contract_address', models.CharField(max_length=42, verbose_name='token contract address')),
                ('blockchain_network', models.CharField(default='ethereum', max_length=50, verbose_name='blockchain network')),
                ('mint_transaction_hash', models.CharField(blank=True, max_length=66, verbose_name='mint transaction hash')),
                ('last_update_hash', models.CharField(blank=True, max_length=66, verbose_name='last update hash')),
                ('reputation_metadata', models.JSONField(default=dict, verbose_name='reputation metadata')),
                ('freelancer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reputation_tokens', to='freelancers.freelancer')),
                ('source_job', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='gig_management.gigjob')),
                ('source_review', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='freelancers.freelancerreview')),
            ],
            options={
                'verbose_name': 'Freelancer Reputation Token',
                'verbose_name_plural': 'Freelancer Reputation Tokens',
                'ordering': ['-created'],
            },
        ),
        migrations.CreateModel(
            name='FreelancerSmartContract',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('is_removed', models.BooleanField(default=False)),
                ('contract_id', models.CharField(max_length=50, unique=True, verbose_name='contract ID')),
                ('name', models.CharField(max_length=200, verbose_name='contract name')),
                ('contract_type', models.CharField(choices=[('service_agreement', 'Service Agreement'), ('payment_escrow', 'Payment Escrow'), ('reputation_token', 'Reputation Token'), ('insurance_coverage', 'Insurance Coverage'), ('performance_bond', 'Performance Bond')], max_length=30, verbose_name='contract type')),
                ('contract_address', models.CharField(blank=True, max_length=42, verbose_name='contract address')),
                ('blockchain_network', models.CharField(default='ethereum', max_length=50, verbose_name='blockchain network')),
                ('contract_abi', models.JSONField(default=dict, verbose_name='contract ABI')),
                ('deployer_address', models.CharField(max_length=42, verbose_name='deployer address')),
                ('deployment_transaction_hash', models.CharField(blank=True, max_length=66, verbose_name='deployment transaction hash')),
                ('gas_used', models.IntegerField(default=0, verbose_name='gas used')),
                ('deployment_cost_wei', models.DecimalField(decimal_places=0, default=0, max_digits=20, verbose_name='deployment cost wei')),
                ('status', models.CharField(choices=[('draft', 'Draft'), ('deployed', 'Deployed'), ('active', 'Active'), ('completed', 'Completed'), ('cancelled', 'Cancelled'), ('disputed', 'Disputed')], default='draft', max_length=20, verbose_name='status')),
                ('is_verified', models.BooleanField(default=False, verbose_name='is verified')),
                ('deployed_at', models.DateTimeField(blank=True, null=True, verbose_name='deployed at')),
                ('contract_parameters', models.JSONField(default=dict, verbose_name='contract parameters')),
                ('upgradeable', models.BooleanField(default=False, verbose_name='upgradeable')),
                ('freelancer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='smart_contracts', to='freelancers.freelancer')),
                ('job', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='smart_contracts', to='gig_management.gigjob')),
            ],
            options={
                'verbose_name': 'Freelancer Smart Contract',
                'verbose_name_plural': 'Freelancer Smart Contracts',
                'ordering': ['-created'],
            },
        ),
        migrations.CreateModel(
            name='FreelancerWeb3Transaction',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('is_removed', models.BooleanField(default=False)),
                ('transaction_type', models.CharField(choices=[('nft_mint', 'NFT Mint'), ('nft_transfer', 'NFT Transfer'), ('contract_deploy', 'Contract Deploy'), ('contract_interaction', 'Contract Interaction'), ('payment', 'Payment'), ('reputation_mint', 'Reputation Mint'), ('wallet_connection', 'Wallet Connection')], max_length=30, verbose_name='transaction type')),
                ('transaction_hash', models.CharField(max_length=66, unique=True, verbose_name='transaction hash')),
                ('blockchain_network', models.CharField(default='ethereum', max_length=50, verbose_name='blockchain network')),
                ('block_number', models.IntegerField(blank=True, null=True, verbose_name='block number')),
                ('from_address', models.CharField(max_length=42, verbose_name='from address')),
                ('to_address', models.CharField(blank=True, max_length=42, verbose_name='to address')),
                ('value_wei', models.DecimalField(decimal_places=0, default=0, max_digits=20, verbose_name='value wei')),
                ('gas_price_wei', models.DecimalField(decimal_places=0, default=0, max_digits=20, verbose_name='gas price wei')),
                ('gas_used', models.IntegerField(default=0, verbose_name='gas used')),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('confirmed', 'Confirmed'), ('failed', 'Failed'), ('cancelled', 'Cancelled')], default='pending', max_length=20, verbose_name='status')),
                ('confirmation_count', models.IntegerField(default=0, verbose_name='confirmation count')),
                ('confirmed_at', models.DateTimeField(blank=True, null=True, verbose_name='confirmed at')),
                ('transaction_metadata', models.JSONField(default=dict, verbose_name='transaction metadata')),
                ('freelancer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='web3_transactions', to='freelancers.freelancer')),
                ('related_contract', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='freelancer_web3.freelancersmartcontract')),
                ('related_nft', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='freelancer_web3.freelancernftinstance')),
                ('related_reputation_token', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='freelancer_web3.freelancerreputationtoken')),
            ],
            options={
                'verbose_name': 'Freelancer Web3 Transaction',
                'verbose_name_plural': 'Freelancer Web3 Transactions',
                'ordering': ['-created'],
                'indexes': [models.Index(fields=['transaction_hash'], name='freelancer__transac_b4feab_idx'), models.Index(fields=['freelancer', 'transaction_type'], name='freelancer__freelan_38adff_idx'), models.Index(fields=['status', 'created'], name='freelancer__status_ffd999_idx')],
            },
        ),
        migrations.CreateModel(
            name='FreelancerWalletConnection',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('is_removed', models.BooleanField(default=False)),
                ('wallet_type', models.CharField(choices=[('metamask', 'MetaMask'), ('walletconnect', 'WalletConnect'), ('coinbase', 'Coinbase Wallet'), ('trust', 'Trust Wallet'), ('ledger', 'Ledger'), ('trezor', 'Trezor')], max_length=20, verbose_name='wallet type')),
                ('wallet_address', models.CharField(max_length=42, verbose_name='wallet address')),
                ('wallet_name', models.CharField(blank=True, max_length=100, verbose_name='wallet name')),
                ('connection_status', models.CharField(choices=[('pending', 'Pending'), ('connected', 'Connected'), ('disconnected', 'Disconnected'), ('expired', 'Expired')], default='pending', max_length=20, verbose_name='connection status')),
                ('signature', models.TextField(blank=True, verbose_name='signature')),
                ('nonce', models.CharField(blank=True, max_length=100, verbose_name='nonce')),
                ('blockchain_network', models.CharField(default='ethereum', max_length=50, verbose_name='blockchain network')),
                ('chain_id', models.IntegerField(default=1, verbose_name='chain ID')),
                ('connected_at', models.DateTimeField(blank=True, null=True, verbose_name='connected at')),
                ('last_used_at', models.DateTimeField(blank=True, null=True, verbose_name='last used at')),
                ('expires_at', models.DateTimeField(blank=True, null=True, verbose_name='expires at')),
                ('is_primary', models.BooleanField(default=False, verbose_name='is primary wallet')),
                ('ip_address', models.GenericIPAddressField(blank=True, null=True, verbose_name='IP address')),
                ('user_agent', models.TextField(blank=True, verbose_name='user agent')),
                ('freelancer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='wallet_connections', to='freelancers.freelancer')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='freelancer_wallet_connections', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Freelancer Wallet Connection',
                'verbose_name_plural': 'Freelancer Wallet Connections',
                'ordering': ['-connected_at'],
                'indexes': [models.Index(fields=['wallet_address'], name='freelancer__wallet__15fe96_idx'), models.Index(fields=['freelancer', 'is_primary'], name='freelancer__freelan_e9e86a_idx')],
                'unique_together': {('freelancer', 'wallet_address', 'wallet_type')},
            },
        ),
        migrations.AddIndex(
            model_name='freelancersmartcontract',
            index=models.Index(fields=['contract_id'], name='freelancer__contrac_3f3d99_idx'),
        ),
        migrations.AddIndex(
            model_name='freelancersmartcontract',
            index=models.Index(fields=['contract_address'], name='freelancer__contrac_123d38_idx'),
        ),
        migrations.AddIndex(
            model_name='freelancersmartcontract',
            index=models.Index(fields=['freelancer', 'status'], name='freelancer__freelan_eba767_idx'),
        ),
        migrations.AddIndex(
            model_name='freelancerreputationtoken',
            index=models.Index(fields=['freelancer', 'token_type'], name='freelancer__freelan_f9208a_idx'),
        ),
        migrations.AddIndex(
            model_name='freelancerreputationtoken',
            index=models.Index(fields=['token_contract_address'], name='freelancer__token_c_aba76e_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='freelancerreputationtoken',
            unique_together={('freelancer', 'token_type')},
        ),
        migrations.AddIndex(
            model_name='freelancernftinstance',
            index=models.Index(fields=['token_id'], name='freelancer__token_i_f9f59d_idx'),
        ),
        migrations.AddIndex(
            model_name='freelancernftinstance',
            index=models.Index(fields=['freelancer', 'status'], name='freelancer__freelan_5ab556_idx'),
        ),
        migrations.AddIndex(
            model_name='freelancernftinstance',
            index=models.Index(fields=['nft_contract_address', 'token_id'], name='freelancer__nft_con_87af75_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='freelancernftinstance',
            unique_together={('freelancer', 'badge', 'token_id')},
        ),
    ]
