# Generated by Django 4.2.7 on 2025-10-20 11:34

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Wallet',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Unique identifier for the wallet', primary_key=True, serialize=False)),
                ('address', models.CharField(help_text='Wallet address (0x... for EVM, 5GrwvaEF5zXb26Fz9rcQpDWS57CtERHpNehXCPcNoHGKutQY for Substrate)', max_length=100, unique=True)),
                ('wallet_type', models.CharField(choices=[('metamask', 'MetaMask'), ('polkadot', 'Polkadot.js'), ('walletconnect', 'WalletConnect'), ('other', 'Other')], help_text='Type of wallet (MetaMask, Polkadot.js, etc.)', max_length=20)),
                ('chain_type', models.CharField(choices=[('ethereum', 'Ethereum'), ('polygon', 'Polygon'), ('bsc', 'Binance Smart Chain'), ('substrate', 'Substrate'), ('polkadot', 'Polkadot'), ('kusama', 'Kusama'), ('other', 'Other')], help_text='Type of blockchain network', max_length=20)),
                ('chain_id', models.CharField(help_text='Network chain ID (1 for Ethereum mainnet, 137 for Polygon, etc.)', max_length=50)),
                ('network_name', models.CharField(help_text='Human-readable network name (Ethereum Mainnet, Polkadot, etc.)', max_length=100)),
                ('is_primary', models.BooleanField(default=False, help_text="Whether this is the user's primary wallet")),
                ('is_verified', models.BooleanField(default=False, help_text='Whether this wallet has been verified through signature')),
                ('is_active', models.BooleanField(default=True, help_text='Whether this wallet is currently active')),
                ('public_key', models.TextField(blank=True, help_text='Public key for Substrate wallets', null=True)),
                ('metadata', models.JSONField(default=dict, help_text='Additional wallet metadata (SS58 format, etc.)')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='When the wallet was first connected')),
                ('last_used', models.DateTimeField(auto_now=True, help_text='When the wallet was last used for authentication')),
                ('verified_at', models.DateTimeField(blank=True, help_text='When the wallet was verified', null=True)),
                ('user', models.ForeignKey(help_text='User who owns this wallet', on_delete=django.db.models.deletion.CASCADE, related_name='wallet_connections', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Wallet',
                'verbose_name_plural': 'Wallets',
                'db_table': 'wallet',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='WalletSignature',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Unique identifier for the signature', primary_key=True, serialize=False)),
                ('signature_type', models.CharField(choices=[('authentication', 'Authentication'), ('transaction', 'Transaction'), ('verification', 'Verification'), ('permission', 'Permission')], help_text='Type of signature request', max_length=20)),
                ('message', models.TextField(help_text='Message to be signed')),
                ('signature', models.TextField(blank=True, help_text='The actual signature', null=True)),
                ('nonce', models.CharField(help_text='Nonce to prevent replay attacks', max_length=100)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('signed', 'Signed'), ('verified', 'Verified'), ('expired', 'Expired'), ('failed', 'Failed')], default='pending', help_text='Current status of the signature', max_length=20)),
                ('verified', models.BooleanField(default=False, help_text='Whether the signature has been verified')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='When the signature request was created')),
                ('signed_at', models.DateTimeField(blank=True, help_text='When the signature was provided', null=True)),
                ('verified_at', models.DateTimeField(blank=True, help_text='When the signature was verified', null=True)),
                ('expires_at', models.DateTimeField(help_text='When the signature request expires')),
                ('ip_address', models.GenericIPAddressField(blank=True, help_text='IP address of the signature request', null=True)),
                ('user_agent', models.TextField(blank=True, help_text='User agent of the signature request', null=True)),
                ('metadata', models.JSONField(default=dict, help_text='Additional signature metadata')),
                ('wallet', models.ForeignKey(help_text='Wallet that will sign the message', on_delete=django.db.models.deletion.CASCADE, related_name='signatures', to='wallet.wallet')),
            ],
            options={
                'verbose_name': 'Wallet Signature',
                'verbose_name_plural': 'Wallet Signatures',
                'db_table': 'wallet_signature',
                'ordering': ['-created_at'],
                'indexes': [models.Index(fields=['wallet', 'status'], name='wallet_sign_wallet__81da40_idx'), models.Index(fields=['signature_type'], name='wallet_sign_signatu_7b120d_idx'), models.Index(fields=['nonce'], name='wallet_sign_nonce_955a6a_idx'), models.Index(fields=['expires_at'], name='wallet_sign_expires_fb0afe_idx'), models.Index(fields=['created_at'], name='wallet_sign_created_bc1a74_idx')],
            },
        ),
        migrations.CreateModel(
            name='WalletSession',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Unique identifier for the session', primary_key=True, serialize=False)),
                ('session_key', models.CharField(help_text='Django session key', max_length=100, unique=True)),
                ('jwt_token', models.TextField(blank=True, help_text='JWT token for API authentication', null=True)),
                ('ip_address', models.GenericIPAddressField(help_text='IP address of the session')),
                ('user_agent', models.TextField(help_text='User agent of the session')),
                ('is_active', models.BooleanField(default=True, help_text='Whether the session is currently active')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='When the session was created')),
                ('last_activity', models.DateTimeField(auto_now=True, help_text='When the session was last active')),
                ('expires_at', models.DateTimeField(help_text='When the session expires')),
                ('user', models.ForeignKey(help_text='User authenticated in this session', on_delete=django.db.models.deletion.CASCADE, related_name='wallet_sessions', to=settings.AUTH_USER_MODEL)),
                ('wallet', models.ForeignKey(help_text='Wallet used for this session', on_delete=django.db.models.deletion.CASCADE, related_name='sessions', to='wallet.wallet')),
            ],
            options={
                'verbose_name': 'Wallet Session',
                'verbose_name_plural': 'Wallet Sessions',
                'db_table': 'wallet_session',
                'ordering': ['-last_activity'],
                'indexes': [models.Index(fields=['wallet', 'is_active'], name='wallet_sess_wallet__e28c36_idx'), models.Index(fields=['user', 'is_active'], name='wallet_sess_user_id_e10238_idx'), models.Index(fields=['session_key'], name='wallet_sess_session_fa5f3c_idx'), models.Index(fields=['expires_at'], name='wallet_sess_expires_e93abb_idx'), models.Index(fields=['last_activity'], name='wallet_sess_last_ac_3d6e03_idx')],
            },
        ),
        migrations.CreateModel(
            name='WalletPermission',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Unique identifier for the permission', primary_key=True, serialize=False)),
                ('permission_type', models.CharField(choices=[('read', 'Read'), ('write', 'Write'), ('delete', 'Delete'), ('admin', 'Admin'), ('sign', 'Sign'), ('approve', 'Approve')], help_text='Type of permission', max_length=20)),
                ('resource_type', models.CharField(choices=[('invoice', 'Invoice'), ('payment', 'Payment'), ('expense', 'Expense'), ('user', 'User'), ('organization', 'Organization'), ('ledger', 'Ledger'), ('wallet', 'Wallet'), ('all', 'All Resources')], help_text='Type of resource this permission applies to', max_length=20)),
                ('resource_id', models.CharField(blank=True, help_text='Specific resource ID (null for all resources of this type)', max_length=100, null=True)),
                ('granted', models.BooleanField(default=True, help_text='Whether the permission is granted (True) or denied (False)')),
                ('reason', models.TextField(blank=True, help_text='Reason for granting/denying this permission', null=True)),
                ('expires_at', models.DateTimeField(blank=True, help_text='When this permission expires (null for permanent)', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='When the permission was created')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='When the permission was last updated')),
                ('granted_by', models.ForeignKey(help_text='User who granted this permission', on_delete=django.db.models.deletion.CASCADE, related_name='granted_permissions', to=settings.AUTH_USER_MODEL)),
                ('wallet', models.ForeignKey(help_text='Wallet that has this permission', on_delete=django.db.models.deletion.CASCADE, related_name='permissions', to='wallet.wallet')),
            ],
            options={
                'verbose_name': 'Wallet Permission',
                'verbose_name_plural': 'Wallet Permissions',
                'db_table': 'wallet_permission',
                'ordering': ['-created_at'],
                'indexes': [models.Index(fields=['wallet', 'permission_type'], name='wallet_perm_wallet__a5884c_idx'), models.Index(fields=['resource_type', 'resource_id'], name='wallet_perm_resourc_87f53d_idx'), models.Index(fields=['granted'], name='wallet_perm_granted_a6b13a_idx'), models.Index(fields=['expires_at'], name='wallet_perm_expires_96c102_idx')],
            },
        ),
        migrations.AddConstraint(
            model_name='walletpermission',
            constraint=models.UniqueConstraint(fields=('wallet', 'permission_type', 'resource_type', 'resource_id'), name='unique_wallet_permission'),
        ),
        migrations.AddIndex(
            model_name='wallet',
            index=models.Index(fields=['address'], name='wallet_address_7130a3_idx'),
        ),
        migrations.AddIndex(
            model_name='wallet',
            index=models.Index(fields=['wallet_type'], name='wallet_wallet__fca749_idx'),
        ),
        migrations.AddIndex(
            model_name='wallet',
            index=models.Index(fields=['chain_type'], name='wallet_chain_t_02592b_idx'),
        ),
        migrations.AddIndex(
            model_name='wallet',
            index=models.Index(fields=['user', 'is_primary'], name='wallet_user_id_148b7c_idx'),
        ),
        migrations.AddIndex(
            model_name='wallet',
            index=models.Index(fields=['is_verified', 'is_active'], name='wallet_is_veri_526192_idx'),
        ),
        migrations.AddConstraint(
            model_name='wallet',
            constraint=models.UniqueConstraint(condition=models.Q(('is_primary', True)), fields=('user', 'is_primary'), name='unique_primary_wallet_per_user'),
        ),
    ]
