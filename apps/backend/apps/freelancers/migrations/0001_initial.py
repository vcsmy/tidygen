# Generated by Django 4.2.7 on 2025-10-20 11:34

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import model_utils.fields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Freelancer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('is_removed', models.BooleanField(default=False)),
                ('freelancer_id', models.CharField(max_length=50, unique=True, verbose_name='freelancer ID')),
                ('first_name', models.CharField(max_length=100, verbose_name='first name')),
                ('last_name', models.CharField(max_length=100, verbose_name='last name')),
                ('middle_name', models.CharField(blank=True, max_length=100, verbose_name='middle name')),
                ('date_of_birth', models.DateField(verbose_name='date of birth')),
                ('gender', models.CharField(blank=True, choices=[('male', 'Male'), ('female', 'Female'), ('other', 'Other'), ('prefer_not_to_say', 'Prefer not to say')], max_length=20, verbose_name='gender')),
                ('nationality', models.CharField(blank=True, max_length=100, verbose_name='nationality')),
                ('personal_email', models.EmailField(max_length=254, verbose_name='personal email')),
                ('personal_phone', models.CharField(max_length=20, verbose_name='personal phone')),
                ('emergency_contact_name', models.CharField(max_length=200, verbose_name='emergency contact name')),
                ('emergency_contact_phone', models.CharField(max_length=20, verbose_name='emergency contact phone')),
                ('emergency_contact_relationship', models.CharField(blank=True, max_length=50, verbose_name='emergency contact relationship')),
                ('address_line1', models.CharField(max_length=200, verbose_name='address line 1')),
                ('address_line2', models.CharField(blank=True, max_length=200, verbose_name='address line 2')),
                ('city', models.CharField(max_length=100, verbose_name='city')),
                ('state', models.CharField(max_length=100, verbose_name='state')),
                ('postal_code', models.CharField(max_length=20, verbose_name='postal code')),
                ('country', models.CharField(max_length=100, verbose_name='country')),
                ('service_areas', models.JSONField(default=list, verbose_name='service areas')),
                ('max_travel_distance', models.IntegerField(default=25, verbose_name='max travel distance (miles)')),
                ('cleaning_types', models.JSONField(default=list, verbose_name='cleaning types')),
                ('special_skills', models.TextField(blank=True, verbose_name='special skills')),
                ('certifications', models.JSONField(default=list, verbose_name='certifications')),
                ('years_of_experience', models.IntegerField(default=0, verbose_name='years of experience')),
                ('availability_schedule', models.JSONField(default=dict, verbose_name='availability schedule')),
                ('is_available', models.BooleanField(default=True, verbose_name='is available')),
                ('last_activity', models.DateTimeField(auto_now=True, verbose_name='last activity')),
                ('rating', models.DecimalField(decimal_places=2, default=0, max_digits=3, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(5)], verbose_name='rating')),
                ('total_jobs_completed', models.IntegerField(default=0, verbose_name='total jobs completed')),
                ('on_time_percentage', models.DecimalField(decimal_places=2, default=0, max_digits=5, verbose_name='on time percentage')),
                ('completion_rate', models.DecimalField(decimal_places=2, default=0, max_digits=5, verbose_name='completion rate')),
                ('hourly_rate', models.DecimalField(decimal_places=2, max_digits=8, validators=[django.core.validators.MinValueValidator(0)], verbose_name='hourly rate')),
                ('currency', models.CharField(default='USD', max_length=3, verbose_name='currency')),
                ('payment_method', models.CharField(choices=[('bank_transfer', 'Bank Transfer'), ('crypto_wallet', 'Crypto Wallet'), ('paypal', 'PayPal'), ('stripe', 'Stripe'), ('cash', 'Cash')], default='bank_transfer', max_length=20, verbose_name='payment method')),
                ('wallet_address', models.CharField(blank=True, max_length=42, verbose_name='wallet address')),
                ('blockchain_verified', models.BooleanField(default=False, verbose_name='blockchain verified')),
                ('nft_badge_id', models.CharField(blank=True, max_length=100, verbose_name='NFT badge ID')),
                ('status', models.CharField(choices=[('pending_verification', 'Pending Verification'), ('verified', 'Verified'), ('active', 'Active'), ('inactive', 'Inactive'), ('suspended', 'Suspended'), ('rejected', 'Rejected')], default='pending_verification', max_length=20, verbose_name='status')),
                ('verification_status', models.CharField(choices=[('pending', 'Pending'), ('document_review', 'Document Review'), ('background_check', 'Background Check'), ('verified', 'Verified'), ('rejected', 'Rejected')], default='pending', max_length=20, verbose_name='verification status')),
                ('background_check_completed', models.BooleanField(default=False, verbose_name='background check completed')),
                ('background_check_date', models.DateField(blank=True, null=True, verbose_name='background check date')),
                ('background_check_reference', models.CharField(blank=True, max_length=200, verbose_name='background check reference')),
                ('insurance_provider', models.CharField(blank=True, max_length=200, verbose_name='insurance provider')),
                ('insurance_policy_number', models.CharField(blank=True, max_length=100, verbose_name='insurance policy number')),
                ('insurance_expiry_date', models.DateField(blank=True, null=True, verbose_name='insurance expiry date')),
                ('bio', models.TextField(blank=True, verbose_name='bio')),
                ('profile_picture', models.ImageField(blank=True, null=True, upload_to='freelancer_profiles/', verbose_name='profile picture')),
                ('preferred_language', models.CharField(default='en', max_length=10, verbose_name='preferred language')),
                ('timezone', models.CharField(default='UTC', max_length=50, verbose_name='timezone')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='freelancer_profile', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Freelancer',
                'verbose_name_plural': 'Freelancers',
                'ordering': ['-created'],
            },
        ),
        migrations.CreateModel(
            name='FreelancerSkill',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('is_removed', models.BooleanField(default=False)),
                ('name', models.CharField(max_length=100, unique=True, verbose_name='skill name')),
                ('category', models.CharField(choices=[('cleaning', 'Cleaning'), ('maintenance', 'Maintenance'), ('specialized', 'Specialized Services'), ('equipment', 'Equipment Operation'), ('safety', 'Safety'), ('other', 'Other')], max_length=20, verbose_name='category')),
                ('description', models.TextField(blank=True, verbose_name='description')),
                ('is_certification_required', models.BooleanField(default=False, verbose_name='certification required')),
            ],
            options={
                'verbose_name': 'Freelancer Skill',
                'verbose_name_plural': 'Freelancer Skills',
                'ordering': ['category', 'name'],
            },
        ),
        migrations.CreateModel(
            name='FreelancerDocument',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('is_removed', models.BooleanField(default=False)),
                ('document_type', models.CharField(choices=[('id_copy', 'ID Copy'), ('passport', 'Passport'), ('drivers_license', "Driver's License"), ('background_check', 'Background Check'), ('insurance_certificate', 'Insurance Certificate'), ('certification', 'Professional Certification'), ('tax_document', 'Tax Document'), ('bank_statement', 'Bank Statement'), ('reference_letter', 'Reference Letter'), ('other', 'Other')], max_length=30, verbose_name='document type')),
                ('title', models.CharField(max_length=200, verbose_name='title')),
                ('description', models.TextField(blank=True, verbose_name='description')),
                ('file', models.FileField(upload_to='freelancer_documents/', verbose_name='file')),
                ('file_size', models.IntegerField(blank=True, null=True, verbose_name='file size')),
                ('is_verified', models.BooleanField(default=False, verbose_name='is verified')),
                ('verified_at', models.DateTimeField(blank=True, null=True, verbose_name='verified at')),
                ('verification_notes', models.TextField(blank=True, verbose_name='verification notes')),
                ('expiry_date', models.DateField(blank=True, null=True, verbose_name='expiry date')),
                ('is_expired', models.BooleanField(default=False, verbose_name='is expired')),
                ('freelancer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='documents', to='freelancers.freelancer')),
                ('verified_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='verified_freelancer_documents', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Freelancer Document',
                'verbose_name_plural': 'Freelancer Documents',
                'ordering': ['-created'],
            },
        ),
        migrations.CreateModel(
            name='FreelancerSkillAssignment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('is_removed', models.BooleanField(default=False)),
                ('proficiency_level', models.CharField(choices=[('beginner', 'Beginner'), ('intermediate', 'Intermediate'), ('advanced', 'Advanced'), ('expert', 'Expert')], max_length=20, verbose_name='proficiency level')),
                ('years_of_experience', models.IntegerField(default=0, verbose_name='years of experience')),
                ('certification_date', models.DateField(blank=True, null=True, verbose_name='certification date')),
                ('certification_body', models.CharField(blank=True, max_length=200, verbose_name='certification body')),
                ('certification_number', models.CharField(blank=True, max_length=100, verbose_name='certification number')),
                ('notes', models.TextField(blank=True, verbose_name='notes')),
                ('freelancer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='skill_assignments', to='freelancers.freelancer')),
                ('skill', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='freelancer_assignments', to='freelancers.freelancerskill')),
            ],
            options={
                'verbose_name': 'Freelancer Skill Assignment',
                'verbose_name_plural': 'Freelancer Skill Assignments',
                'ordering': ['skill__category', 'skill__name'],
                'unique_together': {('freelancer', 'skill')},
            },
        ),
        migrations.CreateModel(
            name='FreelancerReview',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('is_removed', models.BooleanField(default=False)),
                ('overall_rating', models.IntegerField(validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)], verbose_name='overall rating')),
                ('quality_rating', models.IntegerField(validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)], verbose_name='quality rating')),
                ('punctuality_rating', models.IntegerField(validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)], verbose_name='punctuality rating')),
                ('communication_rating', models.IntegerField(validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)], verbose_name='communication rating')),
                ('professionalism_rating', models.IntegerField(validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)], verbose_name='professionalism rating')),
                ('title', models.CharField(max_length=200, verbose_name='review title')),
                ('comment', models.TextField(verbose_name='comment')),
                ('would_recommend', models.BooleanField(default=True, verbose_name='would recommend')),
                ('job_reference', models.CharField(blank=True, max_length=100, verbose_name='job reference')),
                ('freelancer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reviews', to='freelancers.freelancer')),
                ('reviewer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='freelancer_reviews_given', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Freelancer Review',
                'verbose_name_plural': 'Freelancer Reviews',
                'ordering': ['-created'],
                'indexes': [models.Index(fields=['freelancer', 'overall_rating'], name='freelancers_freelan_171d0e_idx')],
            },
        ),
        migrations.CreateModel(
            name='FreelancerAvailability',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('is_removed', models.BooleanField(default=False)),
                ('day_of_week', models.IntegerField(choices=[(0, 'Monday'), (1, 'Tuesday'), (2, 'Wednesday'), (3, 'Thursday'), (4, 'Friday'), (5, 'Saturday'), (6, 'Sunday')], verbose_name='day of week')),
                ('start_time', models.TimeField(verbose_name='start time')),
                ('end_time', models.TimeField(verbose_name='end time')),
                ('is_available', models.BooleanField(default=True, verbose_name='is available')),
                ('notes', models.TextField(blank=True, verbose_name='notes')),
                ('is_recurring', models.BooleanField(default=True, verbose_name='is recurring')),
                ('specific_dates', models.JSONField(default=list, verbose_name='specific dates')),
                ('freelancer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='availability_slots', to='freelancers.freelancer')),
            ],
            options={
                'verbose_name': 'Freelancer Availability',
                'verbose_name_plural': 'Freelancer Availability',
                'ordering': ['day_of_week', 'start_time'],
                'unique_together': {('freelancer', 'day_of_week', 'start_time')},
            },
        ),
        migrations.AddIndex(
            model_name='freelancer',
            index=models.Index(fields=['freelancer_id'], name='freelancers_freelan_559b4e_idx'),
        ),
        migrations.AddIndex(
            model_name='freelancer',
            index=models.Index(fields=['status', 'is_available'], name='freelancers_status_cf5bd1_idx'),
        ),
        migrations.AddIndex(
            model_name='freelancer',
            index=models.Index(fields=['city', 'state'], name='freelancers_city_08cd0b_idx'),
        ),
        migrations.AddIndex(
            model_name='freelancer',
            index=models.Index(fields=['rating'], name='freelancers_rating_cef206_idx'),
        ),
    ]
