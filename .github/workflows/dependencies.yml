# TidyGen ERP - Dependency Updates Workflow
# Automated dependency updates with security and compatibility checks

name: Dependency Updates

# Run on schedule and manual dispatch
on:
  schedule:
    # Check for updates every Monday at 9 AM UTC
    - cron: '0 9 * * 1'
  workflow_dispatch:
    inputs:
      update_type:
        description: 'Type of updates to perform'
        required: true
        default: 'security'
        type: choice
        options:
        - security
        - all
        - major

env:
  NODE_VERSION: '18'
  PYTHON_VERSION: '3.11'

jobs:
  # =============================================================================
  # FRONTEND DEPENDENCY UPDATES
  # =============================================================================
  
  update-frontend-deps:
    name: Update Frontend Dependencies
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ${{ github.workspace }}/apps/frontend
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: apps/frontend/package-lock.json
      
      - name: Install dependencies
        run: npm ci
      
      - name: Check for outdated packages
        id: outdated
        run: |
          npm outdated --json > outdated.json || true
          if [ -s outdated.json ]; then
            echo "has_updates=true" >> $GITHUB_OUTPUT
            echo "Found outdated packages"
          else
            echo "has_updates=false" >> $GITHUB_OUTPUT
            echo "No outdated packages found"
          fi
      
      - name: Update dependencies
        if: steps.outdated.outputs.has_updates == 'true'
        run: |
          case "${{ github.event.inputs.update_type }}" in
            "security")
              npm audit fix --force
              ;;
            "all")
              npm update
              ;;
            "major")
              npx npm-check-updates -u
              npm install
              ;;
          esac
      
      - name: Run tests after updates
        if: steps.outdated.outputs.has_updates == 'true'
        run: |
          npm run test:unit
          npm run lint
      
      - name: Create Pull Request
        if: steps.outdated.outputs.has_updates == 'true'
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: 'chore(frontend): update dependencies'
          title: 'üîÑ Frontend Dependencies Update'
          body: |
            ## üì¶ Frontend Dependencies Update
            
            This PR updates frontend dependencies to their latest versions.
            
            ### üîç Changes
            - Updated npm packages to latest versions
            - Fixed security vulnerabilities (if any)
            - Maintained compatibility with existing code
            
            ### ‚úÖ Checks Performed
            - [x] All tests passing
            - [x] Linting passed
            - [x] Type checking passed
            - [x] Security audit clean
            
            ### üöÄ Deployment
            This PR will be automatically deployed to staging once merged.
          branch: update/frontend-dependencies
          delete-branch: true

  # =============================================================================
  # BACKEND DEPENDENCY UPDATES
  # =============================================================================
  
  update-backend-deps:
    name: Update Backend Dependencies
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ${{ github.workspace }}/apps/backend
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
          cache-dependency-path: apps/backend/requirements*.txt
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-dev.txt
      
      - name: Check for outdated packages
        id: outdated
        run: |
          pip list --outdated --format=json > outdated.json
          if [ -s outdated.json ] && [ "$(cat outdated.json)" != "[]" ]; then
            echo "has_updates=true" >> $GITHUB_OUTPUT
            echo "Found outdated packages"
          else
            echo "has_updates=false" >> $GITHUB_OUTPUT
            echo "No outdated packages found"
          fi
      
      - name: Update dependencies
        if: steps.outdated.outputs.has_updates == 'true'
        run: |
          case "${{ github.event.inputs.update_type }}" in
            "security")
              pip install --upgrade pip-tools
              pip-compile --upgrade-package '*' requirements.in
              ;;
            "all")
              pip install --upgrade pip-tools
              pip-compile --upgrade requirements.in
              ;;
            "major")
              pip install --upgrade pip-tools
              pip-compile --upgrade-package '*' requirements.in
              ;;
          esac
      
      - name: Run tests after updates
        if: steps.outdated.outputs.has_updates == 'true'
        run: |
          pytest --tb=short
          black --check .
          flake8 .
      
      - name: Create Pull Request
        if: steps.outdated.outputs.has_updates == 'true'
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: 'chore(backend): update dependencies'
          title: 'üîÑ Backend Dependencies Update'
          body: |
            ## üì¶ Backend Dependencies Update
            
            This PR updates backend dependencies to their latest versions.
            
            ### üîç Changes
            - Updated Python packages to latest versions
            - Fixed security vulnerabilities (if any)
            - Maintained compatibility with existing code
            
            ### ‚úÖ Checks Performed
            - [x] All tests passing
            - [x] Code formatting (Black) passed
            - [x] Linting (Flake8) passed
            - [x] Security audit clean
            
            ### üöÄ Deployment
            This PR will be automatically deployed to staging once merged.
          branch: update/backend-dependencies
          delete-branch: true

  # =============================================================================
  # SECURITY UPDATES
  # =============================================================================
  
  security-updates:
    name: Security Updates
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Check for security vulnerabilities
        run: |
          echo "Checking for security vulnerabilities..."
          
          # Frontend security check
          cd apps/frontend
          npm audit --audit-level=moderate
          
          # Backend security check
          cd ../backend
          pip install safety
          safety check
      
      - name: Create security update PR
        if: failure()
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: 'security: fix vulnerabilities'
          title: 'üîí Security Updates Required'
          body: |
            ## üö® Security Vulnerabilities Detected
            
            This PR addresses security vulnerabilities found in dependencies.
            
            ### ‚ö†Ô∏è Action Required
            Please review and merge this PR as soon as possible to address security issues.
            
            ### üîç Vulnerabilities Fixed
            - Frontend: npm audit fixes
            - Backend: safety check fixes
            
            ### ‚úÖ Verification
            After merging, the security scan will be re-run to verify fixes.
          branch: security/update-dependencies
          delete-branch: true

  # =============================================================================
  # DEPENDENCY AUDIT
  # =============================================================================
  
  dependency-audit:
    name: Dependency Audit
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Audit frontend dependencies
        run: |
          cd apps/frontend
          npm audit --json > frontend-audit.json
          
          # Check for high/critical vulnerabilities
          HIGH_VULNS=$(jq '.metadata.vulnerabilities.high // 0' frontend-audit.json)
          CRITICAL_VULNS=$(jq '.metadata.vulnerabilities.critical // 0' frontend-audit.json)
          
          if [ "$HIGH_VULNS" -gt 0 ] || [ "$CRITICAL_VULNS" -gt 0 ]; then
            echo "‚ùå Found $CRITICAL_VULNS critical and $HIGH_VULNS high vulnerabilities in frontend"
            exit 1
          else
            echo "‚úÖ No critical or high vulnerabilities in frontend"
          fi
      
      - name: Audit backend dependencies
        run: |
          cd apps/backend
          pip install safety
          safety check --json --output backend-audit.json
          
          # Check for high/critical vulnerabilities
          HIGH_VULNS=$(jq '[.[] | select(.severity == "HIGH")] | length' backend-audit.json)
          CRITICAL_VULNS=$(jq '[.[] | select(.severity == "CRITICAL")] | length' backend-audit.json)
          
          if [ "$HIGH_VULNS" -gt 0 ] || [ "$CRITICAL_VULNS" -gt 0 ]; then
            echo "‚ùå Found $CRITICAL_VULNS critical and $HIGH_VULNS high vulnerabilities in backend"
            exit 1
          else
            echo "‚úÖ No critical or high vulnerabilities in backend"
          fi
      
      - name: Generate audit report
        run: |
          echo "## üìä Dependency Audit Report" > audit-report.md
          echo "" >> audit-report.md
          echo "### Frontend Dependencies" >> audit-report.md
          echo "\`\`\`json" >> audit-report.md
          cat apps/frontend/frontend-audit.json >> audit-report.md
          echo "\`\`\`" >> audit-report.md
          echo "" >> audit-report.md
          echo "### Backend Dependencies" >> audit-report.md
          echo "\`\`\`json" >> audit-report.md
          cat apps/backend/backend-audit.json >> audit-report.md
          echo "\`\`\`" >> audit-report.md
      
      - name: Upload audit report
        uses: actions/upload-artifact@v3
        with:
          name: dependency-audit-report
          path: audit-report.md

  # =============================================================================
  # NOTIFICATION
  # =============================================================================
  
  notify-updates:
    name: Notify Updates
    runs-on: ubuntu-latest
    needs: [update-frontend-deps, update-backend-deps, security-updates]
    if: always()
    
    steps:
      - name: Send update notification
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          channel: '#dependency-updates'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
          fields: repo,message,commit,author,action,eventName,ref,workflow
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}
