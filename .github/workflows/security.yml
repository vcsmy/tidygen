# iNEAT ERP - Security Scanning Workflow
# Dedicated security scanning with scheduled runs and vulnerability management

name: Security Scan

# Run on schedule, pull requests, and manual dispatch
on:
  schedule:
    # Run security scans daily at 2 AM UTC
    - cron: '0 2 * * *'
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

jobs:
  # =============================================================================
  # DEPENDENCY VULNERABILITY SCANNING
  # =============================================================================
  
  dependency-scan:
    name: Dependency Vulnerability Scan
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH,MEDIUM'
      
      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'
      
      - name: Run npm audit for frontend
        run: |
          cd apps/frontend
          npm audit --audit-level=moderate --json > npm-audit.json
        continue-on-error: true
      
      - name: Run safety check for Python dependencies
        run: |
          cd apps/backend
          pip install safety
          safety check --json --output safety-report.json
        continue-on-error: true
      
      - name: Comment PR with security findings
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            
            // Read security reports
            let comment = '## üîí Security Scan Results\n\n';
            
            try {
              const npmAudit = JSON.parse(fs.readFileSync('apps/frontend/npm-audit.json', 'utf8'));
              if (npmAudit.vulnerabilities && Object.keys(npmAudit.vulnerabilities).length > 0) {
                comment += '### ‚ö†Ô∏è Frontend Dependencies\n';
                comment += `Found ${Object.keys(npmAudit.vulnerabilities).length} vulnerabilities\n\n`;
              }
            } catch (e) {
              comment += '### ‚úÖ Frontend Dependencies\nNo vulnerabilities found\n\n';
            }
            
            try {
              const safetyReport = JSON.parse(fs.readFileSync('apps/backend/safety-report.json', 'utf8'));
              if (safetyReport.length > 0) {
                comment += '### ‚ö†Ô∏è Backend Dependencies\n';
                comment += `Found ${safetyReport.length} vulnerabilities\n\n`;
              }
            } catch (e) {
              comment += '### ‚úÖ Backend Dependencies\nNo vulnerabilities found\n\n';
            }
            
            comment += 'Please review and address any security issues before merging.';
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

  # =============================================================================
  # CODE SECURITY ANALYSIS
  # =============================================================================
  
  code-security:
    name: Code Security Analysis
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v2
        with:
          languages: javascript, python
      
      - name: Autobuild
        uses: github/codeql-action/autobuild@v2
      
      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v2
      
      - name: Run Bandit security linter (Python)
        uses: gaurav-nelson/bandit-action@v1
        with:
          path: apps/backend
          level: medium
          confidence: medium
          format: json
          output: bandit-report.json
      
      - name: Run ESLint security rules (JavaScript/TypeScript)
        run: |
          cd apps/frontend
          npm install eslint-plugin-security
          npx eslint src/ --ext .ts,.tsx,.js,.jsx --config .eslintrc.security.js --format json --output-file eslint-security-report.json
        continue-on-error: true

  # =============================================================================
  # SECRETS DETECTION
  # =============================================================================
  
  secrets-scan:
    name: Secrets Detection
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Run TruffleHog OSS
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: main
          head: HEAD
          extra_args: --debug --only-verified

  # =============================================================================
  # CONTAINER SECURITY
  # =============================================================================
  
  container-security:
    name: Container Security Scan
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Build backend image for scanning
        run: |
          cd apps/backend
          docker build -f Dockerfile.prod -t ineat-backend:scan .
      
      - name: Build frontend image for scanning
        run: |
          cd apps/frontend
          docker build -f Dockerfile -t ineat-frontend:scan .
      
      - name: Scan backend image
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'ineat-backend:scan'
          format: 'sarif'
          output: 'backend-container-scan.sarif'
      
      - name: Scan frontend image
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'ineat-frontend:scan'
          format: 'sarif'
          output: 'frontend-container-scan.sarif'
      
      - name: Upload container scan results
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'backend-container-scan.sarif,frontend-container-scan.sarif'

  # =============================================================================
  # SECURITY NOTIFICATION
  # =============================================================================
  
  security-notification:
    name: Security Notification
    runs-on: ubuntu-latest
    needs: [dependency-scan, code-security, secrets-scan]
    if: always() && (needs.dependency-scan.result == 'failure' || needs.code-security.result == 'failure' || needs.secrets-scan.result == 'failure')
    
    steps:
      - name: Send security alert
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          channel: '#security-alerts'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
          fields: repo,message,commit,author,action,eventName,ref,workflow
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}
