# iNEAT ERP - Release Workflow
# Automated release process with versioning, changelog, and deployment

name: Release

# Trigger on version tags and manual dispatch
on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v1.0.0)'
        required: true
        type: string

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # =============================================================================
  # RELEASE VALIDATION
  # =============================================================================
  
  validate-release:
    name: Validate Release
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Validate version format
        run: |
          if [[ "${{ github.ref_name }}" =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "✅ Valid version format: ${{ github.ref_name }}"
          else
            echo "❌ Invalid version format: ${{ github.ref_name }}"
            echo "Expected format: v1.0.0"
            exit 1
          fi
      
      - name: Check if version exists
        run: |
          if git tag -l | grep -q "^${{ github.ref_name }}$"; then
            echo "✅ Tag ${{ github.ref_name }} exists"
          else
            echo "❌ Tag ${{ github.ref_name }} does not exist"
            exit 1
          fi
      
      - name: Run full test suite
        run: |
          # This would run the complete test suite
          echo "Running full test suite for release validation..."

  # =============================================================================
  # BUILD RELEASE IMAGES
  # =============================================================================
  
  build-release:
    name: Build Release Images
    runs-on: ubuntu-latest
    needs: [validate-release]
    
    outputs:
      backend-image: ${{ steps.backend-meta.outputs.tags }}
      frontend-image: ${{ steps.frontend-meta.outputs.tags }}
      version: ${{ steps.version.outputs.version }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Extract version
        id: version
        run: |
          VERSION=${GITHUB_REF#refs/tags/}
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Version: $VERSION"
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Extract metadata for backend
        id: backend-meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/backend
          tags: |
            type=ref,event=tag
            type=raw,value=latest
            type=raw,value=stable
      
      - name: Extract metadata for frontend
        id: frontend-meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/frontend
          tags: |
            type=ref,event=tag
            type=raw,value=latest
            type=raw,value=stable
      
      - name: Build and push backend image
        uses: docker/build-push-action@v5
        with:
          context: ./apps/backend
          file: ./apps/backend/Dockerfile.prod
          push: true
          tags: ${{ steps.backend-meta.outputs.tags }}
          labels: ${{ steps.backend-meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64
      
      - name: Build and push frontend image
        uses: docker/build-push-action@v5
        with:
          context: ./apps/frontend
          file: ./apps/frontend/Dockerfile
          push: true
          tags: ${{ steps.frontend-meta.outputs.tags }}
          labels: ${{ steps.frontend-meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

  # =============================================================================
  # CREATE RELEASE
  # =============================================================================
  
  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [build-release]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Generate changelog
        id: changelog
        run: |
          # Generate changelog from git commits
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
          CURRENT_TAG=${{ needs.build-release.outputs.version }}
          
          if [ -n "$PREVIOUS_TAG" ]; then
            echo "Generating changelog from $PREVIOUS_TAG to $CURRENT_TAG"
            CHANGELOG=$(git log --pretty=format:"- %s (%h)" $PREVIOUS_TAG..HEAD)
          else
            echo "First release - generating full changelog"
            CHANGELOG=$(git log --pretty=format:"- %s (%h)" --reverse)
          fi
          
          # Save changelog to file
          echo "$CHANGELOG" > CHANGELOG.md
          
          # Output for GitHub release
          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          echo "$CHANGELOG" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
      
      - name: Create Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ needs.build-release.outputs.version }}
          release_name: Release ${{ needs.build-release.outputs.version }}
          body: |
            ## 🚀 iNEAT ERP ${{ needs.build-release.outputs.version }}
            
            ### 📦 Docker Images
            - **Backend**: `${{ needs.build-release.outputs.backend-image }}`
            - **Frontend**: `${{ needs.build-release.outputs.frontend-image }}`
            
            ### 📋 Changes
            ${{ steps.changelog.outputs.changelog }}
            
            ### 🔧 Installation
            ```bash
            # Pull the latest images
            docker pull ${{ needs.build-release.outputs.backend-image }}
            docker pull ${{ needs.build-release.outputs.frontend-image }}
            
            # Update your docker-compose.yml with the new image tags
            # Then deploy as usual
            docker-compose up -d
            ```
            
            ### 📚 Documentation
            - [Installation Guide](docs/INSTALLATION.md)
            - [API Documentation](docs/API.md)
            - [Changelog](CHANGELOG.md)
          draft: false
          prerelease: false

  # =============================================================================
  # DEPLOY TO PRODUCTION
  # =============================================================================
  
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [create-release]
    environment: production
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Deploy to production
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.PRODUCTION_HOST }}
          username: ${{ secrets.PRODUCTION_USER }}
          key: ${{ secrets.PRODUCTION_SSH_KEY }}
          script: |
            # Navigate to project directory
            cd /opt/ineat-erp
            
            # Create backup before deployment
            echo "Creating backup..."
            docker-compose -f docker-compose.production.yml exec -T db pg_dump -U $POSTGRES_USER $POSTGRES_DB > backup_$(date +%Y%m%d_%H%M%S).sql
            
            # Pull new release images
            echo "Pulling release images..."
            docker pull ${{ needs.build-release.outputs.backend-image }}
            docker pull ${{ needs.build-release.outputs.frontend-image }}
            
            # Update docker-compose with new images
            export BACKEND_IMAGE=${{ needs.build-release.outputs.backend-image }}
            export FRONTEND_IMAGE=${{ needs.build-release.outputs.frontend-image }}
            envsubst < docker-compose.production.yml > docker-compose.production.override.yml
            
            # Deploy with zero-downtime
            echo "Deploying new release..."
            docker-compose -f docker-compose.production.yml -f docker-compose.production.override.yml up -d
            
            # Run database migrations
            echo "Running migrations..."
            docker-compose -f docker-compose.production.yml exec -T backend python manage.py migrate
            
            # Collect static files
            echo "Collecting static files..."
            docker-compose -f docker-compose.production.yml exec -T backend python manage.py collectstatic --noinput
            
            # Health check
            echo "Performing health check..."
            sleep 30
            curl -f https://api.ineat-erp.com/health/ || exit 1
            
            # Clean up old images
            echo "Cleaning up old images..."
            docker image prune -f
            
            echo "✅ Production deployment completed successfully!"

  # =============================================================================
  # POST-RELEASE TASKS
  # =============================================================================
  
  post-release:
    name: Post-Release Tasks
    runs-on: ubuntu-latest
    needs: [deploy-production]
    
    steps:
      - name: Update documentation
        run: |
          echo "Updating documentation with new release information..."
          # This would update documentation, API docs, etc.
      
      - name: Notify stakeholders
        uses: 8398a7/action-slack@v3
        with:
          status: success
          channel: '#releases'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
          fields: repo,message,commit,author,action,eventName,ref,workflow
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}
      
      - name: Create deployment record
        run: |
          echo "Recording deployment in monitoring system..."
          # This would create a record in your monitoring/deployment tracking system
