# iNEAT ERP - Main CI/CD Pipeline
# This workflow handles linting, testing, building, and deployment for the monorepo

name: iNEAT ERP CI/CD Pipeline

# Trigger on pull requests, pushes to main, and manual dispatch
on:
  pull_request:
    branches: [ main, develop ]
  push:
    branches: [ main, develop ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production

# Environment variables
env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  BACKEND_IMAGE: ${{ github.repository }}/backend
  FRONTEND_IMAGE: ${{ github.repository }}/frontend
  NODE_VERSION: '18'
  PYTHON_VERSION: '3.11'

# Global job configuration
defaults:
  run:
    working-directory: ${{ github.workspace }}

jobs:
  # =============================================================================
  # LINTING AND CODE QUALITY
  # =============================================================================
  
  lint-frontend:
    name: Lint Frontend (TypeScript/React)
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ${{ github.workspace }}/apps/frontend
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: apps/frontend/package-lock.json
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run ESLint
        run: npm run lint
      
      - name: Check TypeScript types
        run: npx tsc --noEmit
      
      - name: Run Prettier check
        run: npx prettier --check "src/**/*.{ts,tsx,js,jsx,json,css,md}"

  lint-backend:
    name: Lint Backend (Python/Django)
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ${{ github.workspace }}/apps/backend
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
          cache-dependency-path: apps/backend/requirements*.txt
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-dev.txt
      
      - name: Run Black (code formatting check)
        run: black --check --diff .
      
      - name: Run isort (import sorting check)
        run: isort --check-only --diff .
      
      - name: Run Flake8 (linting)
        run: flake8 .
      
      - name: Run mypy (type checking)
        run: mypy . --ignore-missing-imports

  # =============================================================================
  # TESTING
  # =============================================================================
  
  test-frontend:
    name: Test Frontend (Vitest)
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ${{ github.workspace }}/apps/frontend
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: apps/frontend/package-lock.json
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run unit tests
        run: npm run test:unit
      
      - name: Run test coverage
        run: npm run test:coverage
      
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: apps/frontend/coverage/lcov.info
          flags: frontend
          name: frontend-coverage

  test-backend:
    name: Test Backend (pytest)
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ${{ github.workspace }}/apps/backend
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_ineat_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
          cache-dependency-path: apps/backend/requirements*.txt
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-dev.txt
      
      - name: Set up test environment
        run: |
          export DATABASE_URL=postgresql://postgres:postgres@localhost:5432/test_ineat_db
          export REDIS_URL=redis://localhost:6379/0
          export SECRET_KEY=test-secret-key
          export DEBUG=True
      
      - name: Run database migrations
        run: |
          export DATABASE_URL=postgresql://postgres:postgres@localhost:5432/test_ineat_db
          export REDIS_URL=redis://localhost:6379/0
          export SECRET_KEY=test-secret-key
          export DEBUG=True
          python manage.py migrate
      
      - name: Run tests with coverage
        run: |
          export DATABASE_URL=postgresql://postgres:postgres@localhost:5432/test_ineat_db
          export REDIS_URL=redis://localhost:6379/0
          export SECRET_KEY=test-secret-key
          export DEBUG=True
          pytest --cov=. --cov-report=xml --cov-report=html
      
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: apps/backend/coverage.xml
          flags: backend
          name: backend-coverage

  # =============================================================================
  # SECURITY SCANNING
  # =============================================================================
  
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
      
      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'
      
      - name: Run Bandit security linter (Python)
        uses: gaurav-nelson/bandit-action@v1
        with:
          path: apps/backend
          level: medium
          confidence: medium
      
      - name: Run npm audit (Node.js)
        run: |
          cd apps/frontend
          npm audit --audit-level=moderate
        continue-on-error: true

  # =============================================================================
  # BUILD DOCKER IMAGES
  # =============================================================================
  
  build-images:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: [lint-frontend, lint-backend, test-frontend, test-backend, security-scan]
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    
    outputs:
      backend-image: ${{ steps.backend-meta.outputs.tags }}
      frontend-image: ${{ steps.frontend-meta.outputs.tags }}
      backend-digest: ${{ steps.backend-meta.outputs.digest }}
      frontend-digest: ${{ steps.frontend-meta.outputs.digest }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Extract metadata for backend
        id: backend-meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.BACKEND_IMAGE }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
      
      - name: Extract metadata for frontend
        id: frontend-meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.FRONTEND_IMAGE }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
      
      - name: Build and push backend image
        uses: docker/build-push-action@v5
        with:
          context: ./apps/backend
          file: ./apps/backend/Dockerfile.prod
          push: true
          tags: ${{ steps.backend-meta.outputs.tags }}
          labels: ${{ steps.backend-meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64
      
      - name: Build and push frontend image
        uses: docker/build-push-action@v5
        with:
          context: ./apps/frontend
          file: ./apps/frontend/Dockerfile
          push: true
          tags: ${{ steps.frontend-meta.outputs.tags }}
          labels: ${{ steps.frontend-meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

  # =============================================================================
  # DEPLOYMENT
  # =============================================================================
  
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build-images]
    if: github.ref == 'refs/heads/develop' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'staging')
    environment: staging
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Deploy to staging server
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.STAGING_HOST }}
          username: ${{ secrets.STAGING_USER }}
          key: ${{ secrets.STAGING_SSH_KEY }}
          script: |
            # Navigate to project directory
            cd /opt/ineat-erp
            
            # Pull latest images
            docker pull ${{ needs.build-images.outputs.backend-image }}
            docker pull ${{ needs.build-images.outputs.frontend-image }}
            
            # Update docker-compose with new images
            export BACKEND_IMAGE=${{ needs.build-images.outputs.backend-image }}
            export FRONTEND_IMAGE=${{ needs.build-images.outputs.frontend-image }}
            envsubst < docker-compose.staging.yml > docker-compose.staging.override.yml
            
            # Deploy with zero-downtime
            docker-compose -f docker-compose.staging.yml -f docker-compose.staging.override.yml up -d
            
            # Run database migrations
            docker-compose -f docker-compose.staging.yml exec -T backend python manage.py migrate
            
            # Collect static files
            docker-compose -f docker-compose.staging.yml exec -T backend python manage.py collectstatic --noinput
            
            # Health check
            sleep 30
            curl -f http://localhost:8000/health/ || exit 1
            
            # Clean up old images
            docker image prune -f
      
      - name: Notify deployment status
        uses: 8398a7/action-slack@v3
        if: always()
        with:
          status: ${{ job.status }}
          channel: '#deployments'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build-images]
    if: github.ref == 'refs/heads/main' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'production')
    environment: production
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Deploy to production server
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.PRODUCTION_HOST }}
          username: ${{ secrets.PRODUCTION_USER }}
          key: ${{ secrets.PRODUCTION_SSH_KEY }}
          script: |
            # Navigate to project directory
            cd /opt/ineat-erp
            
            # Create backup
            docker-compose -f docker-compose.production.yml exec -T db pg_dump -U $POSTGRES_USER $POSTGRES_DB > backup_$(date +%Y%m%d_%H%M%S).sql
            
            # Pull latest images
            docker pull ${{ needs.build-images.outputs.backend-image }}
            docker pull ${{ needs.build-images.outputs.frontend-image }}
            
            # Update docker-compose with new images
            export BACKEND_IMAGE=${{ needs.build-images.outputs.backend-image }}
            export FRONTEND_IMAGE=${{ needs.build-images.outputs.frontend-image }}
            envsubst < docker-compose.production.yml > docker-compose.production.override.yml
            
            # Deploy with zero-downtime
            docker-compose -f docker-compose.production.yml -f docker-compose.production.override.yml up -d
            
            # Run database migrations
            docker-compose -f docker-compose.production.yml exec -T backend python manage.py migrate
            
            # Collect static files
            docker-compose -f docker-compose.production.yml exec -T backend python manage.py collectstatic --noinput
            
            # Health check
            sleep 30
            curl -f https://api.ineat-erp.com/health/ || exit 1
            
            # Clean up old images
            docker image prune -f
      
      - name: Notify deployment status
        uses: 8398a7/action-slack@v3
        if: always()
        with:
          status: ${{ job.status }}
          channel: '#deployments'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

  # =============================================================================
  # POST-DEPLOYMENT TESTS
  # =============================================================================
  
  post-deployment-tests:
    name: Post-Deployment Tests
    runs-on: ubuntu-latest
    needs: [deploy-staging]
    if: always() && needs.deploy-staging.result == 'success'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Run API health checks
        run: |
          # Test staging API endpoints
          curl -f ${{ secrets.STAGING_API_URL }}/health/ || exit 1
          curl -f ${{ secrets.STAGING_API_URL }}/api/web3/status/ || exit 1
      
      - name: Run frontend smoke tests
        run: |
          # Test frontend accessibility
          curl -f ${{ secrets.STAGING_FRONTEND_URL }} || exit 1
      
      - name: Run database connectivity test
        run: |
          # Test database connection
          curl -f ${{ secrets.STAGING_API_URL }}/api/health/db/ || exit 1

  # =============================================================================
  # CLEANUP
  # =============================================================================
  
  cleanup:
    name: Cleanup
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always()
    
    steps:
      - name: Clean up old container images
        run: |
          # This would typically run on the deployment servers
          echo "Cleanup completed - old images removed"
      
      - name: Update deployment status
        run: |
          echo "Deployment pipeline completed successfully"
